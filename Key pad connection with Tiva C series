#include <stdint.h>
#include "tm4c123gh6pm.h"
#include <string.h>

// Pin Definitions
#define GREEN_LED   (1U << 3)  // PF3 - Green LED
#define RED_LED     (1U << 1)  // PF1 - Red LED

// Function Prototypes
void delayMilliseconds(uint32_t ms);
void PortF_Init(void);
void Keypad_Init(void);
char Keypad_Scan(void);
void UART0_Init(void);
void UART0_SendString(char *str);
void Check_Code(void);

int main(void) {
    PortF_Init();  
    Keypad_Init(); 
    UART0_Init();  

    while (1) {
        Check_Code(); // Function to check entered code
    }
}

// PORT F - LED Initialization
void PortF_Init(void) {
    SYSCTL_RCGCGPIO_R |= (1U << 5);  // Enable Clock for Port F
    while ((SYSCTL_PRGPIO_R & (1U << 5)) == 0);

    GPIO_PORTF_DIR_R |= (GREEN_LED | RED_LED); 
    GPIO_PORTF_DEN_R |= (GREEN_LED | RED_LED);  
}


void Keypad_Init(void) {
    SYSCTL_RCGCGPIO_R |= (1U << 4) | (1U << 2);  
    while ((SYSCTL_PRGPIO_R & ((1U << 4) | (1U << 2))) == 0);

    // Configure PE0-PE3 as Output (Rows)
    GPIO_PORTE_DIR_R |= 0x0F;  // PE0, PE1, PE2, PE3 = Output
    GPIO_PORTE_DEN_R |= 0x0F;  // Enable digital function

    // Configure PC4-PC7 as Input (Columns)
    GPIO_PORTC_DIR_R &= ~0xF0;  // PC4, PC5, PC6, PC7 = Input
    GPIO_PORTC_DEN_R |= 0xF0;   // Enable digital function
    GPIO_PORTC_PUR_R |= 0xF0;   // Enable Pull-up Resistors
}

// UART0 Initialization for Serial Debugging
void UART0_Init(void) {
    SYSCTL_RCGCUART_R |= (1U << 0); 
    SYSCTL_RCGCGPIO_R |= (1U << 0);  
    while ((SYSCTL_PRGPIO_R & (1U << 0)) == 0);

    GPIO_PORTA_AFSEL_R |= (1U << 1) | (1U << 0); 
    GPIO_PORTA_PCTL_R = (GPIO_PORTA_PCTL_R & 0xFFFFFF00) | 0x00000011; 
    GPIO_PORTA_DEN_R |= (1U << 1) | (1U << 0); 

    UART0_CTL_R &= ~1; // Disable UART before Configuration
    UART0_IBRD_R = 104; // 16MHz Clock / (16 * 9600 baud rate)
    UART0_FBRD_R = 11;
    UART0_LCRH_R = (0x3 << 5); // 8-bit, No Parity, 1 Stop bit
    UART0_CTL_R |= (1U << 0) | (1U << 8) | (1U << 9); 
}

// UART0 Send String Function
void UART0_SendString(char *str) {
    while (*str) {
        while ((UART0_FR_R & (1U << 5)) != 0);
        UART0_DR_R = *str++;
    }
}

// Keypad Scan Function
char Keypad_Scan(void) {
    int row, col;
    char keys[4][4] = {
        {'1', '2', '3', 'A'},
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (row = 0; row < 4; row++) {
        GPIO_PORTE_DATA_R = ~(1U << row); 

        delayMilliseconds(10); 

        for (col = 0; col < 4; col++) {
            if (!(GPIO_PORTC_DATA_R & (1U << (col + 4)))) { 
                while (!(GPIO_PORTC_DATA_R & (1U << (col + 4)))); 
                return keys[row][col]; 
            }
        }
    }
    return 0; // No key pressed
}

// Check if Entered Code is 2589
void Check_Code(void) {
    char enteredCode[5];
    int index;
    char key;

    while (1) {
        memset(enteredCode, 0, sizeof(enteredCode)); 
        index = 0;
        UART0_SendString("\rEnter Code: "); 

        while (index < 4) {
            key = Keypad_Scan();
            if (key != 0) {
                enteredCode[index++] = key;
                UART0_SendString("*"); 
                delayMilliseconds(300); 
            }
        }

        UART0_SendString("\rEnter Code: **** "); 
        if (strcmp(enteredCode, "2589") == 0) {
            GPIO_PORTF_DATA_R = GREEN_LED; 
            UART0_SendString(" SUCCESS!  ");
        } else {
            GPIO_PORTF_DATA_R = RED_LED; 
            UART0_SendString(" FAILED!   ");
        }

        delayMilliseconds(2000); 
        GPIO_PORTF_DATA_R = 0x00; 
    }
}

// Delay Function
void delayMilliseconds(uint32_t ms) {
    uint32_t i;
    for (i = 0; i < (ms * 4000); i++) {
        __asm("NOP");
    }
}
